{"ast":null,"code":"import _slicedToArray from \"/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/dashboard/src/widgets/accuWeather.js\";\nimport axios from 'axios';\nimport Card from \"@material-ui/core/Card\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nconst apiKey = \"3cLQtZD1ekZ0pnWKYCZ5JMGqrp3BGAVQ\";\nconst entryPoint = \"http://dataservice.accuweather.com/\";\nconst useStyles = makeStyles(theme => ({\n  nasaHeader: {\n    backgroundColor: \"#FFA500\",\n    color: \"#FFFFFF\"\n  }\n}));\n\nconst getLocationKey = async city => {\n  try {\n    const response = await axios({\n      method: 'GET',\n      url: entryPoint + 'locations/v1/cities/search?q=' + city + '&apikey=' + apiKey\n    });\n    return response.data;\n  } catch (e) {\n    console.log(\"error: \", e);\n  }\n};\n\nconst getInfoFromLocation = async locationKey => {\n  try {\n    const response = await axios({\n      method: 'GET',\n      url: entryPoint + 'forecasts/v1/daily/1day/' + locationKey + '?apikey=' + apiKey\n    });\n    return response.data;\n  } catch (e) {\n    console.log(\"error: \", e);\n  }\n};\n\nconst AccuWeatherCard = props => {\n  const classes = useStyles();\n\n  const _useState = useState(undefined),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1]; // useEffect(\n  //     () => { async function fetchData() {\n  //         let location = await getLocationKey(props.city);\n  //         let res = await getInfoFromLocation(location[0].Key);\n  //         setData(res);\n  //     }\n  //     fetchData();\n  // }, []);\n\n\n  const content = data => {\n    if (data === undefined) {\n      //     return (\n      //         <div style={{textAlign: \"center\", marginLeft: \"15px\", marginRight: \"15px\", marginTop: \"15px\"}}>\n      //             <h4>Loading</h4>\n      //         </div>\n      //     );\n      // } else {\n      // let date = data.DailyForecasts[0].Date;\n      // let maxTemp = (parseInt(data.DailyForecasts[0].Temperature.Maximum.Value, 10) - 32) * (5/9);\n      // let minTemp = (parseInt(data.DailyForecasts[0].Temperature.Minimum.Value, 10) - 32) * (5/9);\n      // let dailyIcon = data.DailyForecasts[0].Day.Icon;\n      // let dailyIconPhrase = data.DailyForecasts[0].Day.IconPhrase;\n      // let nightlyIcon = data.DailyForecasts[0].Night.Icon;\n      // let nightlyIconPhrase = data.DailyForecasts[0].Night.IconPhrase;\n      let date = \"11-26\";\n      let maxTemp = 12.2222;\n      let minTemp = 10;\n      let dailyIcon = 12;\n      let dailyIconPhrase = \"shower\";\n      let nightlyIcon = 16;\n      let nightlyIconPhrase = \"rainy\";\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        gutterBottom: true,\n        variant: \"h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, props.city), React.createElement(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, date, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"maxTemp \", maxTemp, \" \\xB0C\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), \"minTemp \", minTemp, \" \\xB0C\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), \"dailyIcon \", dailyIcon, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), \"dailyIconPhrase \", dailyIconPhrase, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }), \"nightlyIcon \", nightlyIcon, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), \"nightlyIconPhrase \", nightlyIconPhrase)));\n    }\n  };\n\n  return React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    position: \"static\",\n    className: classes.nasaHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    edge: \"start\",\n    color: \"inherit\",\n    \"aria-label\": \"menu\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(DashboardIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  })), React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"AccuWeather\"), React.createElement(IconButton, {\n    color: \"inherit\",\n    \"aria-label\": \"menu\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(SettingsIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }))), React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, content(data)));\n};\n\nexport default AccuWeatherCard;","map":{"version":3,"sources":["/dashboard/src/widgets/accuWeather.js"],"names":["axios","Card","Grid","Toolbar","IconButton","DashboardIcon","SettingsIcon","Typography","CardContent","React","useEffect","useState","makeStyles","apiKey","entryPoint","useStyles","theme","nasaHeader","backgroundColor","color","getLocationKey","city","response","method","url","data","e","console","log","getInfoFromLocation","locationKey","AccuWeatherCard","props","classes","undefined","setData","content","date","maxTemp","minTemp","dailyIcon","dailyIconPhrase","nightlyIcon","nightlyIconPhrase"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport Card from \"@material-ui/core/Card\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport React, {useEffect, useState} from \"react\";\nimport {makeStyles} from \"@material-ui/core\";\n\nconst apiKey = \"3cLQtZD1ekZ0pnWKYCZ5JMGqrp3BGAVQ\";\nconst entryPoint = \"http://dataservice.accuweather.com/\";\n\nconst useStyles = makeStyles(theme => ({\n    nasaHeader: {\n        backgroundColor: \"#FFA500\",\n        color: \"#FFFFFF\"\n    },\n}));\n\nconst getLocationKey = async (city) => {\n    try {\n        const response =  await axios ({\n            method: 'GET',\n            url: entryPoint + 'locations/v1/cities/search?q=' + city + '&apikey=' + apiKey,\n        })\n        return response.data;\n    }\n    catch (e) {\n        console.log(\"error: \", e);\n    }\n};\n\nconst getInfoFromLocation = async (locationKey) => {\n    try {\n        const response = await axios({\n            method: 'GET',\n            url: entryPoint + 'forecasts/v1/daily/1day/' + locationKey + '?apikey=' + apiKey,\n        });\n        return response.data;\n    } catch (e) {\n        console.log(\"error: \", e);\n    }\n};\n\nconst AccuWeatherCard = (props) => {\n    const classes = useStyles();\n    const [data, setData] = useState(undefined);\n\n    // useEffect(\n    //     () => { async function fetchData() {\n    //         let location = await getLocationKey(props.city);\n    //         let res = await getInfoFromLocation(location[0].Key);\n    //         setData(res);\n    //     }\n    //     fetchData();\n    // }, []);\n\n    const content = (data) => {\n        if (data === undefined) {\n        //     return (\n        //         <div style={{textAlign: \"center\", marginLeft: \"15px\", marginRight: \"15px\", marginTop: \"15px\"}}>\n        //             <h4>Loading</h4>\n        //         </div>\n        //     );\n        // } else {\n            // let date = data.DailyForecasts[0].Date;\n            // let maxTemp = (parseInt(data.DailyForecasts[0].Temperature.Maximum.Value, 10) - 32) * (5/9);\n            // let minTemp = (parseInt(data.DailyForecasts[0].Temperature.Minimum.Value, 10) - 32) * (5/9);\n            // let dailyIcon = data.DailyForecasts[0].Day.Icon;\n            // let dailyIconPhrase = data.DailyForecasts[0].Day.IconPhrase;\n            // let nightlyIcon = data.DailyForecasts[0].Night.Icon;\n            // let nightlyIconPhrase = data.DailyForecasts[0].Night.IconPhrase;\n            let date = \"11-26\";\n            let maxTemp = 12.2222;\n            let minTemp = 10;\n            let dailyIcon = 12;\n            let dailyIconPhrase = \"shower\";\n            let nightlyIcon = 16;\n            let nightlyIconPhrase = \"rainy\";\n\n            return (\n                <div>\n                    <Typography gutterBottom variant=\"h6\">\n                        {props.city}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                        {date}<br/>\n                    </Typography>\n                    <Grid>\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                            maxTemp {maxTemp} °C<br/>\n                            minTemp {minTemp} °C<br/>\n                            dailyIcon {dailyIcon}<br/>\n                            dailyIconPhrase {dailyIconPhrase}<br/>\n                            nightlyIcon {nightlyIcon}<br/>\n                            nightlyIconPhrase {nightlyIconPhrase}\n                        </Typography>\n                    </Grid>\n                </div>\n            );\n        }\n    };\n\n    return (\n        <Card>\n            <Toolbar position=\"static\" className={classes.nasaHeader}>\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                    <DashboardIcon/>\n                </IconButton>\n                <Typography variant=\"h5\">\n                    AccuWeather\n                </Typography>\n                <IconButton color=\"inherit\" aria-label=\"menu\">\n                    <SettingsIcon/>\n                </IconButton>\n            </Toolbar>\n            <CardContent>\n                {content(data)}\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default AccuWeatherCard;"]},"metadata":{},"sourceType":"module"}