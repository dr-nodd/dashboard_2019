{"ast":null,"code":"import _slicedToArray from \"/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/dashboard/src/widgets/nasa.js\";\nimport axios from 'axios';\nimport Card from \"@material-ui/core/Card\";\nimport AppBar from \"@material-ui/core/AppBar/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DashboardIcon from \"@material-ui/core/SvgIcon/SvgIcon\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport React, { useEffect, useState } from \"react\";\nimport { Image } from \"react-bootstrap\";\n\nconst getNasaDailyImg = async () => {\n  try {\n    const response = await axios({\n      method: 'GET',\n      url: 'https://api.nasa.gov/planetary/apod?api_key=pANfIB5rv8J2nbFIbpNfua8WgGYtpQ8BEa8fsZXk'\n    });\n    return response.data;\n  } catch (e) {\n    console.log(\"error: \", e);\n  }\n};\n\nconst getMarsImgFromRover = async (rover, sol) => {\n  try {\n    const response = await axios({\n      method: 'GET',\n      url: 'https://api.nasa.gov/mars-photos/api/v1/rovers/' + rover + '/photos?sol=' + sol + '&api_key=pANfIB5rv8J2nbFIbpNfua8WgGYtpQ8BEa8fsZXk'\n    });\n    return response.data;\n  } catch (e) {\n    console.log(\"error: \", e);\n  }\n};\n\nconst NasaCard = props => {\n  const _useState = useState(undefined),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const _useState3 = useState(undefined),\n        _useState4 = _slicedToArray(_useState3, 2),\n        sol = _useState4[0],\n        setSol = _useState4[1];\n\n  useEffect(async () => {\n    let tmp = await getMarsImgFromRover(props.rover, 1);\n    let sol;\n    if (props.param === \"random\") sol = Math.floor(Math.random() * tmp.photos[0].rover.max_sol) + 1;else sol = tmp.photos[0].rover.max_sol;\n    let res = await getMarsImgFromRover(props.rover, sol);\n    setData(res);\n    setSol(sol);\n  }, []);\n\n  const content = data => {\n    if (data === undefined) {\n      return React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\",\n          marginLeft: \"15px\",\n          marginRight: \"15px\",\n          marginTop: \"15px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Loading\"));\n    } else {\n      if (data.photos[0] !== undefined) {\n        return React.createElement(\"div\", {\n          style: {\n            textAlign: \"center\",\n            marginLeft: \"15px\",\n            marginRight: \"15px\",\n            marginTop: \"15px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, React.createElement(Image, {\n          src: data.photos[0].img_src,\n          fluid: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }), React.createElement(Typography, {\n          gutterLeft: true,\n          variant: \"h5\",\n          component: \"h2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, \"Lizard\"), React.createElement(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\",\n          component: \"p\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\"));\n      } else {\n        return React.createElement(\"div\", {\n          style: {\n            textAlign: \"center\",\n            marginLeft: \"15px\",\n            marginRight: \"15px\",\n            marginTop: \"15px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, React.createElement(\"h4\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, \"No picture were taken on sol \", sol));\n      }\n    }\n  };\n\n  return React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(AppBar, {\n    position: \"static\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    edge: \"start\",\n    color: \"inherit\",\n    \"aria-label\": \"menu\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(DashboardIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  })), React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Nasa \", props.rover, \" camera\"))), React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, content(data)));\n};\n\nexport default NasaCard;","map":{"version":3,"sources":["/dashboard/src/widgets/nasa.js"],"names":["axios","Card","AppBar","Toolbar","IconButton","DashboardIcon","Typography","CardMedia","CardContent","React","useEffect","useState","Image","getNasaDailyImg","response","method","url","data","e","console","log","getMarsImgFromRover","rover","sol","NasaCard","props","undefined","setData","setSol","tmp","param","Math","floor","random","photos","max_sol","res","content","textAlign","marginLeft","marginRight","marginTop","img_src"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport Card from \"@material-ui/core/Card\";\nimport AppBar from \"@material-ui/core/AppBar/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DashboardIcon from \"@material-ui/core/SvgIcon/SvgIcon\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport React, {useEffect, useState} from \"react\";\nimport {Image} from \"react-bootstrap\";\n\nconst getNasaDailyImg = async () => {\n    try {\n        const response =  await axios ({\n            method: 'GET',\n            url: 'https://api.nasa.gov/planetary/apod?api_key=pANfIB5rv8J2nbFIbpNfua8WgGYtpQ8BEa8fsZXk',\n        })\n        return response.data;\n    }\n    catch (e) {\n        console.log(\"error: \", e);\n    }\n};\n\nconst getMarsImgFromRover = async (rover, sol) => {\n    try {\n        const response = await axios({\n            method: 'GET',\n            url: 'https://api.nasa.gov/mars-photos/api/v1/rovers/' + rover + '/photos?sol=' + sol + '&api_key=pANfIB5rv8J2nbFIbpNfua8WgGYtpQ8BEa8fsZXk',\n        });\n        return response.data;\n    } catch (e) {\n        console.log(\"error: \", e);\n    }\n};\n\nconst NasaCard = (props) => {\n    const [data, setData] = useState(undefined);\n    const [sol, setSol] = useState(undefined);\n\n    useEffect( async() => {\n        let tmp = await getMarsImgFromRover(props.rover, 1);\n        let sol;\n        if (props.param === \"random\")\n            sol = Math.floor(Math.random() * tmp.photos[0].rover.max_sol) + 1;\n        else\n            sol = tmp.photos[0].rover.max_sol;\n        let res = await getMarsImgFromRover(props.rover, sol);\n        setData(res);\n        setSol(sol);\n    }, []);\n\n    const content = (data) => {\n        if (data === undefined) {\n            return (\n                <div style={{textAlign: \"center\", marginLeft: \"15px\", marginRight: \"15px\", marginTop: \"15px\"}}>\n                    <h4>Loading</h4>\n                </div>\n            );\n        } else {\n            if (data.photos[0] !== undefined) {\n                return (\n                    <div style={{textAlign: \"center\", marginLeft: \"15px\", marginRight: \"15px\", marginTop: \"15px\"}}>\n                        <Image src={data.photos[0].img_src} fluid/>\n                        <Typography gutterLeft variant=\"h5\" component=\"h2\">\n                            Lizard\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                            Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging\n                            across all continents except Antarctica\n                        </Typography>\n                        {/*<h4>Picture were taken on {data.photos[0].earth_date} (sol : {sol}) by the {data.photos[0].camera.full_name}</h4>*/}\n                    </div>\n                );\n            } else {\n                return (\n                    <div style={{textAlign: \"center\", marginLeft: \"15px\", marginRight: \"15px\", marginTop: \"15px\"}}>\n                        <h4>No picture were taken on sol {sol}</h4>\n                    </div>\n                );\n            }\n        }\n    };\n\n    return (\n        <Card>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <DashboardIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        Nasa {props.rover} camera\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <CardContent>\n                {content(data)}\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default NasaCard;"]},"metadata":{},"sourceType":"module"}