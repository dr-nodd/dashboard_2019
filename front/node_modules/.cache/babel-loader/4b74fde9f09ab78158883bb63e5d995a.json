{"ast":null,"code":"import _slicedToArray from \"/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/dashboard/src/widgets/Exchange.js\";\n// import MetricsGraphics from 'react-metrics-graphics';\n// import 'metrics-graphics/dist/metricsgraphics.css';\n//\nimport axios from 'axios';\nimport Card from \"@material-ui/core/Card\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport React, { useEffect, useState } from \"react\";\nimport { Image, Modal } from \"react-bootstrap\";\nimport { makeStyles } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Button, Form, FormGroup, Input } from \"reactstrap\";\nconst useStyles = makeStyles(theme => ({\n  exchangeHeader: {\n    backgroundColor: \"#A0A0A0\",\n    color: \"#FFFFFF\"\n  },\n  exchangeConfig: {\n    align: \"right\"\n  }\n}));\n\nconst getLatestExchangeData = async (base = \"EUR\") => {\n  try {\n    const response = await axios({\n      method: 'GET',\n      url: 'https://api.exchangeratesapi.io/latest?base=' + base\n    });\n    return response.data;\n  } catch (e) {\n    console.log(\"error: \", e);\n  }\n};\n\nconst getExchangeDataStartEnd = async (base = \"EUR\", start = \"2018-01-01\", end = \"2019-01-01\") => {\n  try {\n    const response = await axios({\n      method: 'GET',\n      url: 'https://api.exchangeratesapi.io/history?base=' + base + '&start_at=' + start + '&end_at=' + end\n    });\n    return response.data;\n  } catch (e) {\n    console.log(\"error: \", e);\n  }\n};\n\nconst ExchangeCard = props => {\n  const classes = useStyles();\n\n  const _useState = useState(undefined),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const _useState3 = useState(props.param),\n        _useState4 = _slicedToArray(_useState3, 2),\n        Param = _useState4[0],\n        setParam = _useState4[1];\n\n  const _useState5 = useState(\"EUR\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        Base = _useState6[0],\n        setBase = _useState6[1];\n\n  const _useState7 = useState(1),\n        _useState8 = _slicedToArray(_useState7, 2),\n        BaseValue = _useState8[0],\n        setBaseValue = _useState8[1];\n\n  const _useState9 = useState(\"USD\"),\n        _useState10 = _slicedToArray(_useState9, 2),\n        Currency = _useState10[0],\n        setCurrency = _useState10[1];\n\n  const _useState11 = useState(\"last\"),\n        _useState12 = _slicedToArray(_useState11, 2),\n        modalParam = _useState12[0],\n        setModalParam = _useState12[1];\n\n  const _useState13 = useState(\"Opportunity\"),\n        _useState14 = _slicedToArray(_useState13, 2),\n        modalRover = _useState14[0],\n        setModalRover = _useState14[1];\n\n  useEffect(() => {\n    async function fetchData() {\n      let res = await getLatestExchangeData(Base);\n      setData(res);\n    }\n\n    fetchData();\n  }, [Base, Currency]);\n\n  const content = data => {\n    // return (\n    //     <MetricsGraphics\n    //         title=\"Downloads\"\n    //         description=\"This graphic shows a time-series of downloads.\"\n    //         data={ [{'date':new Date('2014-11-01'),'value':12}, {'date':new Date('2014-11-02'),'value':18}] }\n    //         width={600}\n    //         height={250}\n    //         x_accessor=\"date\"\n    //         y_accessor=\"value\"\n    //     />\n    // );\n    if (data === undefined) {\n      return React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\",\n          marginLeft: \"15px\",\n          marginRight: \"15px\",\n          marginTop: \"15px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Loading\"));\n    } else {\n      let base = data.base;\n      let date = data.date;\n      let currency = data.rates[Currency];\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        spacing: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"body1\",\n        color: \"textSecondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Date : \", date)), React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Base Currency :\"), React.createElement(Input, {\n        onChange: e => setBaseValue(e.target.value),\n        style: {\n          paddingRight: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }), React.createElement(Typography, {\n        variant: \"body1\",\n        color: \"textSecondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, base)), React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"Exchange Currencies :\"), React.createElement(Typography, {\n        variant: \"body1\",\n        color: \"textSecondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, BaseValue * currency, \" \", Currency))));\n    }\n  };\n\n  const _useState15 = useState(true),\n        _useState16 = _slicedToArray(_useState15, 2),\n        modal = _useState16[0],\n        setModal = _useState16[1];\n\n  const toggle = () => setModal(!modal);\n\n  return React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    position: \"static\",\n    className: classes.exchangeHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    edge: \"start\",\n    color: \"inherit\",\n    \"aria-label\": \"menu\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(DashboardIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }))), React.createElement(Grid, {\n    item: true,\n    xs: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      marginTop: \"10px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    style: {\n      textAlign: \"center\"\n    },\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \"Exchange\"))), React.createElement(Grid, {\n    item: true,\n    xs: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    color: \"inherit\",\n    \"aria-label\": \"menu\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(SettingsIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }))), React.createElement(Grid, {\n    item: true,\n    xs: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    color: \"inherit\",\n    \"aria-label\": \"menu\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(DeleteIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }))))), React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, content(data)));\n};\n\nexport default ExchangeCard;","map":{"version":3,"sources":["/dashboard/src/widgets/Exchange.js"],"names":["axios","Card","Toolbar","IconButton","DashboardIcon","SettingsIcon","DeleteIcon","Typography","CardContent","React","useEffect","useState","Image","Modal","makeStyles","Grid","Button","Form","FormGroup","Input","useStyles","theme","exchangeHeader","backgroundColor","color","exchangeConfig","align","getLatestExchangeData","base","response","method","url","data","e","console","log","getExchangeDataStartEnd","start","end","ExchangeCard","props","classes","undefined","setData","param","Param","setParam","Base","setBase","BaseValue","setBaseValue","Currency","setCurrency","modalParam","setModalParam","modalRover","setModalRover","fetchData","res","content","textAlign","marginLeft","marginRight","marginTop","date","currency","rates","target","value","paddingRight","modal","setModal","toggle"],"mappings":";;AAAA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,KAAR,EAAeC,KAAf,QAA2B,iBAA3B;AACA,SAAQC,UAAR,QAAyB,mBAAzB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,SAAtB,EAAiCC,KAAjC,QAA6C,YAA7C;AAEA,MAAMC,SAAS,GAAGN,UAAU,CAACO,KAAK,KAAK;AACnCC,EAAAA,cAAc,EAAE;AACZC,IAAAA,eAAe,EAAE,SADL;AAEZC,IAAAA,KAAK,EAAE;AAFK,GADmB;AAKnCC,EAAAA,cAAc,EAAE;AACZC,IAAAA,KAAK,EAAE;AADK;AALmB,CAAL,CAAN,CAA5B;;AAUA,MAAMC,qBAAqB,GAAG,OAAOC,IAAI,GAAC,KAAZ,KAAsB;AAChD,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAM7B,KAAK,CAAC;AACzB8B,MAAAA,MAAM,EAAE,KADiB;AAEzBC,MAAAA,GAAG,EAAE,iDAAiDH;AAF7B,KAAD,CAA5B;AAIA,WAAOC,QAAQ,CAACG,IAAhB;AACH,GAND,CAME,OAAOC,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,CAAvB;AACH;AACJ,CAVD;;AAYA,MAAMG,uBAAuB,GAAG,OAAOR,IAAI,GAAC,KAAZ,EAAmBS,KAAK,GAAC,YAAzB,EAAuCC,GAAG,GAAC,YAA3C,KAA4D;AACxF,MAAI;AACA,UAAMT,QAAQ,GAAG,MAAM7B,KAAK,CAAC;AACzB8B,MAAAA,MAAM,EAAE,KADiB;AAEzBC,MAAAA,GAAG,EAAE,kDAAkDH,IAAlD,GAAyD,YAAzD,GAAwES,KAAxE,GAAgF,UAAhF,GAA6FC;AAFzE,KAAD,CAA5B;AAIA,WAAOT,QAAQ,CAACG,IAAhB;AACH,GAND,CAME,OAAOC,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,CAAvB;AACH;AACJ,CAVD;;AAYA,MAAMM,YAAY,GAAIC,KAAD,IAAW;AAC5B,QAAMC,OAAO,GAAGrB,SAAS,EAAzB;;AAD4B,oBAEJT,QAAQ,CAAC+B,SAAD,CAFJ;AAAA;AAAA,QAErBV,IAFqB;AAAA,QAEfW,OAFe;;AAAA,qBAGFhC,QAAQ,CAAC6B,KAAK,CAACI,KAAP,CAHN;AAAA;AAAA,QAGrBC,KAHqB;AAAA,QAGdC,QAHc;;AAAA,qBAIJnC,QAAQ,CAAC,KAAD,CAJJ;AAAA;AAAA,QAIrBoC,IAJqB;AAAA,QAIfC,OAJe;;AAAA,qBAKMrC,QAAQ,CAAC,CAAD,CALd;AAAA;AAAA,QAKrBsC,SALqB;AAAA,QAKVC,YALU;;AAAA,qBAMIvC,QAAQ,CAAC,KAAD,CANZ;AAAA;AAAA,QAMrBwC,QANqB;AAAA,QAMXC,WANW;;AAAA,sBAOQzC,QAAQ,CAAC,MAAD,CAPhB;AAAA;AAAA,QAOrB0C,UAPqB;AAAA,QAOTC,aAPS;;AAAA,sBAQQ3C,QAAQ,CAAC,aAAD,CARhB;AAAA;AAAA,QAQrB4C,UARqB;AAAA,QAQTC,aARS;;AAU5B9C,EAAAA,SAAS,CACL,MAAM;AAAE,mBAAe+C,SAAf,GAA2B;AAC/B,UAAIC,GAAG,GAAG,MAAM/B,qBAAqB,CAACoB,IAAD,CAArC;AACAJ,MAAAA,OAAO,CAACe,GAAD,CAAP;AACH;;AACGD,IAAAA,SAAS;AACZ,GANI,EAMF,CAACV,IAAD,EAAOI,QAAP,CANE,CAAT;;AAQA,QAAMQ,OAAO,GAAI3B,IAAD,IAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAIA,IAAI,KAAKU,SAAb,EAAwB;AACpB,aACI;AAAK,QAAA,KAAK,EAAE;AAACkB,UAAAA,SAAS,EAAE,QAAZ;AAAsBC,UAAAA,UAAU,EAAE,MAAlC;AAA0CC,UAAAA,WAAW,EAAE,MAAvD;AAA+DC,UAAAA,SAAS,EAAE;AAA1E,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,CADJ;AAKH,KAND,MAMO;AACH,UAAInC,IAAI,GAAGI,IAAI,CAACJ,IAAhB;AACA,UAAIoC,IAAI,GAAGhC,IAAI,CAACgC,IAAhB;AACA,UAAIC,QAAQ,GAAGjC,IAAI,CAACkC,KAAL,CAAWf,QAAX,CAAf;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,OAApB;AAA4B,QAAA,KAAK,EAAC,eAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACYa,IADZ,CADJ,CADJ,EAMI,oBAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,EAII,oBAAC,KAAD;AAAO,QAAA,QAAQ,EAAE/B,CAAC,IAAIiB,YAAY,CAACjB,CAAC,CAACkC,MAAF,CAASC,KAAV,CAAlC;AAAoD,QAAA,KAAK,EAAE;AAACC,UAAAA,YAAY,EAAC;AAAd,SAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EAKI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,OAApB;AAA4B,QAAA,KAAK,EAAC,eAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKzC,IADL,CALJ,CANJ,EAeI,oBAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADJ,EAII,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,OAApB;AAA4B,QAAA,KAAK,EAAC,eAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKqB,SAAS,GAAGgB,QADjB,OAC4Bd,QAD5B,CAJJ,CAfJ,CADJ,CADJ;AA4BH;AACJ,GAnDD;;AAlB4B,sBAuEFxC,QAAQ,CAAC,IAAD,CAvEN;AAAA;AAAA,QAuErB2D,KAvEqB;AAAA,QAuEdC,QAvEc;;AAyE5B,QAAMC,MAAM,GAAG,MAAMD,QAAQ,CAAC,CAACD,KAAF,CAA7B;;AAEA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAoCI,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAC,QAAlB;AAA2B,IAAA,SAAS,EAAE7B,OAAO,CAACnB,cAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAC,OAAjB;AAAyB,IAAA,KAAK,EAAC,SAA/B;AAAyC,kBAAW,MAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CADJ,EAMI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,KAAK,EAAE;AAACyC,MAAAA,SAAS,EAAE;AAAZ,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAE;AAACH,MAAAA,SAAS,EAAE;AAAZ,KAAnB;AAA0C,IAAA,OAAO,EAAC,IAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,CADJ,CANJ,EAaI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,SAAlB;AAA4B,kBAAW,MAAvC;AAA+C,IAAA,OAAO,EAAEY,MAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CAbJ,EAkBI,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,SAAlB;AAA4B,kBAAW,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CAlBJ,CADJ,CApCJ,EA8DI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKb,OAAO,CAAC3B,IAAD,CADZ,CA9DJ,CADJ;AAoEH,CA/ID;;AAiJA,eAAeO,YAAf","sourcesContent":["// import MetricsGraphics from 'react-metrics-graphics';\n// import 'metrics-graphics/dist/metricsgraphics.css';\n//\nimport axios from 'axios';\nimport Card from \"@material-ui/core/Card\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport React, {useEffect, useState} from \"react\";\nimport {Image, Modal} from \"react-bootstrap\";\nimport {makeStyles} from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {Button, Form, FormGroup, Input} from \"reactstrap\";\n\nconst useStyles = makeStyles(theme => ({\n    exchangeHeader: {\n        backgroundColor: \"#A0A0A0\",\n        color: \"#FFFFFF\"\n    },\n    exchangeConfig: {\n        align: \"right\",\n    },\n}));\n\nconst getLatestExchangeData = async (base=\"EUR\") => {\n    try {\n        const response = await axios({\n            method: 'GET',\n            url: 'https://api.exchangeratesapi.io/latest?base=' + base,\n        });\n        return response.data;\n    } catch (e) {\n        console.log(\"error: \", e);\n    }\n};\n\nconst getExchangeDataStartEnd = async (base=\"EUR\", start=\"2018-01-01\", end=\"2019-01-01\") => {\n    try {\n        const response = await axios({\n            method: 'GET',\n            url: 'https://api.exchangeratesapi.io/history?base=' + base + '&start_at=' + start + '&end_at=' + end,\n        });\n        return response.data;\n    } catch (e) {\n        console.log(\"error: \", e);\n    }\n};\n\nconst ExchangeCard = (props) => {\n    const classes = useStyles();\n    const [data, setData] = useState(undefined);\n    const [Param, setParam] = useState(props.param);\n    const [Base, setBase] = useState(\"EUR\");\n    const [BaseValue, setBaseValue] = useState(1);\n    const [Currency, setCurrency] = useState(\"USD\");\n    const [modalParam, setModalParam] = useState(\"last\");\n    const [modalRover, setModalRover] = useState(\"Opportunity\");\n\n    useEffect(\n        () => { async function fetchData() {\n            let res = await getLatestExchangeData(Base);\n            setData(res);\n        }\n            fetchData();\n        }, [Base, Currency]);\n\n    const content = (data) => {\n        // return (\n        //     <MetricsGraphics\n        //         title=\"Downloads\"\n        //         description=\"This graphic shows a time-series of downloads.\"\n        //         data={ [{'date':new Date('2014-11-01'),'value':12}, {'date':new Date('2014-11-02'),'value':18}] }\n        //         width={600}\n        //         height={250}\n        //         x_accessor=\"date\"\n        //         y_accessor=\"value\"\n        //     />\n        // );\n        if (data === undefined) {\n            return (\n                <div style={{textAlign: \"center\", marginLeft: \"15px\", marginRight: \"15px\", marginTop: \"15px\"}}>\n                    <h4>Loading</h4>\n                </div>\n            );\n        } else {\n            let base = data.base;\n            let date = data.date;\n            let currency = data.rates[Currency];\n            return (\n                <div>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Typography variant=\"body1\" color=\"textSecondary\">\n                                Date : {date}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Typography variant=\"h6\">\n                                Base Currency :\n                            </Typography>\n                            <Input onChange={e => setBaseValue(e.target.value)} style={{paddingRight:\"20px\"}}/>\n                            <Typography variant=\"body1\" color=\"textSecondary\">\n                                {base}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Typography variant=\"h6\">\n                                Exchange Currencies :\n                            </Typography>\n                            <Typography variant=\"body1\" color=\"textSecondary\">\n                                {BaseValue * currency} {Currency}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </div>\n            );\n        }\n    };\n\n    const [modal, setModal] = useState(true);\n\n    const toggle = () => setModal(!modal);\n\n    return (\n        <Card>\n\n\n            {/*<Modal show={modal} onHide={toggle} centered>*/}\n            {/*    <Modal.Header closeButton>*/}\n            {/*        <Modal.Title>Params</Modal.Title>*/}\n            {/*    </Modal.Header>*/}\n            {/*    <Modal.Body>*/}\n            {/*        <Form>*/}\n            {/*            <FormGroup>*/}\n            {/*                <label>Rover</label>*/}\n            {/*                <Input type=\"select\" onChange={e => setModalRover(e.target.value)}>*/}\n            {/*                    <option selected={Rover === \"Opportunity\"}>Opportunity</option>*/}\n            {/*                    <option selected={Rover === \"Curiosity\"}>Curiosity</option>*/}\n            {/*                    <option selected={Rover === \"Spirit\"}>Spirit</option>*/}\n            {/*                </Input>*/}\n            {/*            </FormGroup>*/}\n            {/*        </Form>*/}\n            {/*    </Modal.Body>*/}\n            {/*    <Modal.Body>*/}\n            {/*        <Form>*/}\n            {/*            <FormGroup>*/}\n            {/*                <label>Param</label>*/}\n            {/*                <Input type=\"select\" onChange={e => setModalParam(e.target.value)}>*/}\n            {/*                    <option selected={Param === \"last\"}>last</option>*/}\n            {/*                    <option selected={Param === \"random\"}>random</option>*/}\n            {/*                </Input>*/}\n            {/*            </FormGroup>*/}\n            {/*        </Form>*/}\n            {/*    </Modal.Body>*/}\n            {/*    <Modal.Footer>*/}\n            {/*        <Button className={classes.save} onClick={() => {setBase(modalRover); setParam(modalParam); toggle()}}>Save</Button>*/}\n            {/*    </Modal.Footer>*/}\n            {/*</Modal>*/}\n\n\n            <Toolbar position=\"static\" className={classes.exchangeHeader}>\n                <Grid container spacing={1}>\n                    <Grid item xs={2}>\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                            <DashboardIcon/>\n                        </IconButton>\n                    </Grid>\n                    <Grid item xs={8}>\n                        <div style={{marginTop: \"10px\"}}>\n                            <Typography style={{textAlign: \"center\"}} variant=\"h5\">\n                                Exchange\n                            </Typography>\n                        </div>\n                    </Grid>\n                    <Grid item xs={1}>\n                        <IconButton color=\"inherit\" aria-label=\"menu\"  onClick={toggle}>\n                            <SettingsIcon/>\n                        </IconButton>\n                    </Grid>\n                    <Grid item xs={1}>\n                        <IconButton color=\"inherit\" aria-label=\"menu\">\n                            <DeleteIcon/>\n                        </IconButton>\n                    </Grid>\n                </Grid>\n            </Toolbar>\n            <CardContent>\n                {content(data)}\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default ExchangeCard;\n"]},"metadata":{},"sourceType":"module"}